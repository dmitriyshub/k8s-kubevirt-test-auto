---

  - name: Set initial values for facts and variables
    ansible.builtin.set_fact:
      "{{ item.key }}": "{{ item.value }}"
    loop:
      - { key: 'remote_facts', value: {} }
      - { key: 'clone_remote_facts', value: {} }
      - { key: 'bridge_ip_address', value: '' }
      - { key: 'clone_bridge_ip_address', value: '' }

  - name: Retrieve network details from primary VM
    ansible.builtin.setup:
    become: yes
    delegate_to: "{{ service_ip }}"
    vars:
      ansible_user: "{{ VM_USER }}"
      ansible_private_key_file: "{{ SSH_PRIVATE_KEY }}"
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    register: remote_facts

  - name: Retrieve network details from cloned VM
    ansible.builtin.setup:
    become: yes
    delegate_to: "{{ clone_service_ip }}"
    vars:
      ansible_user: "{{ VM_USER }}"
      ansible_private_key_file: "{{ SSH_PRIVATE_KEY }}"
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    register: clone_remote_facts

  - name: Find primary VM VLAN Bridge NICs IP address using MAC address
    set_fact:
      bridge_ip_address: "{{ remote_facts['ansible_facts'][item]['ipv4']['address'] }}"
    when: remote_facts['ansible_facts'][item]['macaddress'] == VM_BRIDGE_MAC
    with_items: 
      - "{{ remote_facts['ansible_facts'].keys() | select('match', '^ansible_(eth[0-9]+|enp[0-9]s0)') | list }}"

  - name: Find clone VM VLAN Bridge NICs IP address using MAC address
    set_fact:
      clone_bridge_ip_address: "{{ clone_remote_facts['ansible_facts'][item]['ipv4']['address'] }}"
    when: clone_remote_facts['ansible_facts'][item]['macaddress'] == CLONE_BRIDGE_MAC
    with_items: 
      - "{{ remote_facts['ansible_facts'].keys() | select('match', '^ansible_(eth[0-9]+|enp[0-9]s0)') | list }}"

  - name: Validate HTTPD service accessibility via VMs VLAN Bridge NICs 
    block:
      - name: Access the VMs HTTPD service 
        ansible.builtin.uri:  
          url: "http://{{ item[0] }}" 
          method: GET
          status_code: 200
          headers:
            User-Agent: "curl/7.88.1"
        delegate_to: "{{ item[1] }}"
        vars: 
          ansible_user: "{{ VM_USER }}"
          ansible_private_key_file: "{{ SSH_PRIVATE_KEY }}"
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        register: http_info  
        retries: 3
        delay: 10
        until: http_info.status == 200  
        loop:
          - ["{{ clone_bridge_ip_address }}", "{{ service_ip }}"]
          - ["{{ bridge_ip_address }}", "{{ clone_service_ip }}"]

      - name: Print HTTP response status
        ansible.builtin.debug:
          msg: "HTTP response status from {{ item.item[0] }}: {{ item.status }}"
        loop: "{{ http_info.results }}"

    rescue:
      - name: Print debug info for failed attempts
        ansible.builtin.debug:
          msg: "Failed to access service on {{ item[0] }} via {{ item[1] }}"
        loop:
          - ["{{ clone_bridge_ip_address }}", "{{ service_ip }}"]
          - ["{{ bridge_ip_address }}", "{{ clone_service_ip }}"]