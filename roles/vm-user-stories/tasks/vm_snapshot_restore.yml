---

  - name: Stop the VM 
    k8s:
      state: present
      definition:
        apiVersion: kubevirt.io/v1
        kind: VirtualMachine
        metadata:
          name: "{{ VM_NAME }}"
          namespace: "{{ PROJECT }}"
        spec:
          running: false
    register: vm_status
    
  - name: Ensure the Virtual Machine is stopped
    k8s_info:
      kind: VirtualMachine
      namespace: "{{ PROJECT }}"
      name: "{{ VM_NAME }}"
    register: vm_status
    until: vm_status.resources[0].spec.running == false
    retries: 5
    delay: 10

  - name: Render the 'vm_snapshot.j2' template to generate Snapshot definition
    ansible.builtin.template: 
      src: "vm_snapshot.j2" 
      dest: "files/vm_snapshot.yml"

  - name: Deploy the generated Snapshot yaml
    k8s:
      state: present
      src: "files/vm_snapshot.yml"
    register: snapshot_info
    until: snapshot_info.result.status.readyToUse is defined
    retries: 12
    delay: 10

  - name: Pause for 5 seconds
    pause:
      seconds: 5

  - name: Render the 'vm_restore.j2' template to generate Restore definition
    ansible.builtin.template: 
      src: "vm_restore.j2" 
      dest: "files/vm_restore.yml"

  - name: Deploy the generated Restore yaml
    k8s:
      state: present
      src: "files/vm_restore.yml"
    register: restore_info
    until: restore_info.result.status.complete is defined
    retries: 12
    delay: 10


  - name: Pause for 10 seconds
    pause:
      seconds: 10

  - name: Start the VM after restore
    k8s:
      state: present
      definition:
        apiVersion: kubevirt.io/v1
        kind: VirtualMachine
        metadata:
          name: "{{ VM_NAME }}"
          namespace: "{{ PROJECT }}"
        spec:
          running: true
    register: vm_status
    notify: 
      - Ensure the primary Virtual Machine is accessible over SSH
      - Validate the primary HTTPD service accessibility via the Route
      - Print primary HTTP response status

  - name: Ensure the Virtual Machine is started
    k8s_info:
      kind: VirtualMachine
      namespace: "{{ PROJECT }}"
      name: "{{ VM_NAME }}"
    register: vm_status
    until: vm_status.resources[0].spec.running == true
    retries: 5
    delay: 10

  - name: Ensure the VM are in 'Ready' Status
    k8s_info:
      kind: VirtualMachine
      name: "{{ VM_NAME }}"
      namespace: "{{ PROJECT }}"
    register: vm_info
    retries: 24 
    delay: 10 
    until:
      - vm_info.resources[0].status.conditions is defined
      - "'Ready' in vm_info.resources[0].status.conditions | map(attribute='type') | list"
      - "vm_info.resources[0].status.conditions | json_query('[?type==`Ready`].status') | first == 'True'"

  - name: Delete the Snapshot yaml
    k8s:
      state: absent
      src: "files/vm_snapshot.yml"
    register: snapshot_info
    until: not snapshot_info.result.status.readyToUse is defined
    retries: 12
    delay: 10